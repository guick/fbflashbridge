<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	initialize="init()" 
	width="868" height="545" 
	viewSourceURL="srcview/index.html">
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Text;
			import flash.utils.setTimeout;
			import mx.controls.Alert;
		
			import mx.managers.CursorManager;
			import mx.collections.ArrayCollection;
			
			import be.wellconsidered.apis.fbbridge.data.FBBridgeUser;
			import be.wellconsidered.apis.fbbridge.data.FBBridgePermissions;
			import be.wellconsidered.apis.fbbridge.events.FBBridgeEvent;
			import be.wellconsidered.apis.fbbridge.FBBridge;
		
			public var _fbBridge:FBBridge;
			
			/*
			ExternalInterface.addCallback("onAlbumsGet", onAlbumsGet);
			ExternalInterface.addCallback("onPhotosOfAlbumGet", onPhotosOfAlbumGet);
			ExternalInterface.addCallback("onAlbumCreated", onAlbumCreated); 
			 */
			
			public function init():void
			{
				setTimeout(initBridge, 2000);
				
				btnConnect.alpha = .5;
				btnConnect.enabled = false;
				
				initEventListeners();
			}
		
			public function initEventListeners():void {
				btnGetCurrentUserInfo.addEventListener(MouseEvent.CLICK, getCurrentUserInfo);
				
				btnStory.addEventListener(MouseEvent.CLICK, publishStory);
				btnShare.addEventListener(MouseEvent.CLICK, shareSomething);
				btnGetStream.addEventListener(MouseEvent.CLICK, getStream);
				btnGetStreamComments.addEventListener(MouseEvent.CLICK, getStreamComments);
				btnStatus.addEventListener(MouseEvent.CLICK, setStatus);
				btnGetStatus.addEventListener(MouseEvent.CLICK, getCurrentStatus);
				
				btnNotF.addEventListener(MouseEvent.CLICK, sendFriendsNotification);
				btnNotA.addEventListener(MouseEvent.CLICK, sendAppNotification);
				btnEmailF.addEventListener(MouseEvent.CLICK, sendFriendsEmail);
				btnEmailA.addEventListener(MouseEvent.CLICK, sendAppEmail);
			}
			
			public function initBridge():void
			{
				trace("initBridge");
				
				btnConnect.alpha = 1;
				btnConnect.enabled = true;
				
				_fbBridge = new FBBridge();
				
				_fbBridge.addEventListener(FBBridgeEvent.LOGGED_IN, onLoggedIn);
				_fbBridge.addEventListener(FBBridgeEvent.LOGGED_OUT, onLoggedOut);
				_fbBridge.addEventListener(FBBridgeEvent.STATUS_SET, onStatusSet);
				
				_fbBridge.init();
			}
			
			public function onLoggedIn(e:FBBridgeEvent):void
			{
				trace("UID " + _fbBridge.session.uid);
				
				connectState(true);
				
				getCurrentUserInfo(null);
			}
			
			public function getCurrentUserInfo(e:MouseEvent):void {
				trace("Get Current User Info");
				
				_fbBridge.addEventListener(FBBridgeEvent.USER_INFO, onUserInfo);
				_fbBridge.getUserInfo();
			}
			
			public function onUserInfo(e:FBBridgeEvent):void
			{
				var uInfo:FBBridgeUser = _fbBridge.user;
				
				trace("User info received (" + uInfo.name + ") !");
				
				lblName.text = uInfo.name;
				lblStatus.text = uInfo.status.message;
				
				imgProfile.load(uInfo.pic_square_with_logo);
			}
			
			public function onLoggedOut(e:FBBridgeEvent):void 
			{ 
				connectState(false); 
				
				lblName.text = "";
				lblStatus.text = "";
				
				imgProfile.load(null);
			}
			
			public function connectState(isConnected:Boolean):void
			{
				trace("Connected state is " + isConnected);
				
				txtShare.enabled = isConnected;
				txtStatus.enabled = isConnected;
				
				btnGetCurrentUserInfo.enabled = isConnected;	
				btnGetStream.enabled = isConnected;	
				btnEmailF.enabled = isConnected;	
				btnEmailA.enabled = isConnected;	
				btnNotF.enabled = isConnected;	
				btnNotA.enabled = isConnected;
				btnGetStatus.enabled = isConnected;	
				btnStatus.enabled = isConnected;	
				btnDisconnect.enabled = isConnected;
				btnShare.enabled = isConnected;
				btnStory.enabled = isConnected;
				btnGetFriends.enabled = isConnected;
				btnPerm.enabled = isConnected;
				btnAppUsers.enabled = isConnected;
				btnInvite.enabled = isConnected;
				dPermissions.enabled = isConnected;
				
				dgFriends.enabled = isConnected;
				
				if(isConnected)
				{
					btnConnect.alpha = .5;
					btnConnect.enabled = false;
				}
				else
				{
					btnConnect.alpha = 1;
					btnConnect.enabled = true;
				}
				
				btnGetStreamComments.enabled = false;
			}
			
			public function disconnectFromFB():void
			{
				trace("Disconnect from FB");
				
				_fbBridge.logout();
				
				Alert.show("You are logged out", "Succeeded");
			}
			
			public function connectToFB():void
			{
				trace("Connect to FB");
				
				_fbBridge.login();
			}
			
			public function inviteFriends():void
			{
				trace("Invite Friends");
				
				_fbBridge.inviteFriends("Invite your friends!", "Invite your friends and earn extra credits.", "Come join me at FBFlashBridge and have some fun!");
			}
			
			public function setStatus(e:MouseEvent):void
			{
				trace("Set status to " + txtStatus.text);
				
				_fbBridge.setStatus(txtStatus.text);
			}
			
			public function onStatusSet(e:FBBridgeEvent):void
			{
				trace("Status is set");
				
				Alert.show("Status is set!", "Succeeded");
			}
			
			public function getCurrentStatus(e:MouseEvent):void
			{
				if(_fbBridge) {
					_fbBridge.addEventListener(FBBridgeEvent.CURRENT_STATUS, onCurrentStatus);
					_fbBridge.getCurrentStatus(_fbBridge.user.uid, 100);
				} else {
					trace("_fbBridge not inited");
				}
			}
			
			public function onCurrentStatus(e:FBBridgeEvent):void
			{
				var arrStatus:Array = e.data as Array;
				
				Alert.show("Current status", arrStatus[0]);
				
				trace(arrStatus);
			}
			
			public function shareSomething(e:MouseEvent):void
			{
				if(txtShare.text.length > 0)
				{
					_fbBridge.showShare(txtShare.text);
				}
				else
					Alert.show("You need to specify a link to share", "Warning!");
			}
			
			public function setPerm():void
			{
				if(dPermissions.selectedLabel.length > 0)
					_fbBridge.promptPermission(FBBridgePermissions[dPermissions.selectedLabel]);
			}
			
			public function publishStory(e:MouseEvent):void
			{
				_fbBridge.publishFeedStory("45707232772", {});
			}
			
			public function getFriends():void
			{
				CursorManager.setBusyCursor();
				
				_fbBridge.addEventListener(FBBridgeEvent.FRIENDS_LIST, onFriendsList);
				_fbBridge.getFriendsList();
			}
			
			public function onFriendsList(e:FBBridgeEvent):void
			{
				var arrFriends:Array = e.data as Array;
				
				trace("OnFriendList " + arrFriends.length);
				
				_fbBridge.removeEventListener(FBBridgeEvent.FRIENDS_LIST, onFriendsList);
				
				_fbBridge.addEventListener(FBBridgeEvent.USERS_INFO, onUsersInfo);
				_fbBridge.getUsersInfo(arrFriends, ["uid", "pic_square", "first_name", "last_name", "about_me", "sex", "name", "proxied_email"]);
			}
			
			public function onUsersInfo(e:FBBridgeEvent):void
			{
				trace("onUsersInfo");
				
				_fbBridge.removeEventListener(FBBridgeEvent.USERS_INFO, onUsersInfo);
				
				var arrFriends:Array = e.data as Array;
				
				var arrcFriends:ArrayCollection = new ArrayCollection();
				
				for(var i:int = 0; i < arrFriends.length; i++)
				{
					var oFriend:Object = arrFriends[i];
					
					arrcFriends.addItem({uid: oFriend.uid, name: oFriend.first_name + " " + oFriend.last_name + " (" + oFriend.name + ")", sex: oFriend.sex, proxied_email: oFriend.proxied_email});
				}
				
				dgFriends.dataProvider = arrcFriends;
				
				CursorManager.removeBusyCursor();
			}
			
			public function getAppUsers():void
			{
				CursorManager.setBusyCursor();
				
				_fbBridge.addEventListener(FBBridgeEvent.APP_USERS, onAppUsers);
				_fbBridge.getAppUsers();
			}
			
			public function onAppUsers(e:FBBridgeEvent):void
			{
				var arrUsers:Array = e.data as Array;
				
				trace("onAppUsers " + arrUsers.length);
				
				_fbBridge.removeEventListener(FBBridgeEvent.APP_USERS, onAppUsers);
				
				_fbBridge.addEventListener(FBBridgeEvent.USERS_INFO, onAppUsersInfo);
				_fbBridge.getUsersInfo(arrUsers, ["uid", "pic_square", "first_name", "last_name", "about_me", "sex", "name", "proxied_email"]);
			}
			
			public function onAppUsersInfo(e:FBBridgeEvent):void
			{
				trace("onAppUsersInfo");
				
				_fbBridge.removeEventListener(FBBridgeEvent.USERS_INFO, onAppUsersInfo);
				
				var arrUsers:Array = e.data as Array;
				
				var arrcUsers:ArrayCollection = new ArrayCollection();
				
				for(var i:int = 0; i < arrUsers.length; i++)
				{
					var oUser:Object = arrUsers[i];
					
					arrcUsers.addItem({uid: oUser.uid, name: oUser.first_name + " " + oUser.last_name + " (" + oUser.name + ")", sex: oUser.sex, proxied_email: oUser.proxied_email});
				}
				
				dgAppUsers.dataProvider = arrcUsers;
				
				CursorManager.removeBusyCursor();
			}
			
			public function sendFriendsNotification(e:MouseEvent):void
			{
				if(dgFriends.selectedItems.length > 0)
				{
					var arrUsers:Array = new Array();
					
					for(var i:int = 0; i < dgFriends.selectedItems.length; i++)
					{
						arrUsers.push(dgFriends.selectedItems[i].uid);
					}
					
					_fbBridge.addEventListener(FBBridgeEvent.NOTIFICATION_SENT, onNotSent);
					_fbBridge.sendNotification(arrUsers, "FBFlashBridge app needs your attention. (This comes from <fb:name uid='" + _fbBridge.user.uid + "' />)");
				}
				else
					Alert.show("You need to select one or more friends");
			}
			
			public function sendAppNotification(e:MouseEvent):void
			{
				if(dgAppUsers.selectedItems.length > 0)
				{
					var arrUsers:Array = new Array();
					
					for(var i:int = 0; i < dgAppUsers.selectedItems.length; i++)
					{
						arrUsers.push(dgAppUsers.selectedItems[i].uid);
					}
					
					_fbBridge.addEventListener(FBBridgeEvent.NOTIFICATION_SENT, onNotSent);
					_fbBridge.sendNotification(arrUsers, "FBFlashBridge app needs your attention. (This comes from <fb:name uid='" + _fbBridge.user.uid + "' />)");
				}
				else
					Alert.show("You need to select one or more friends");
			}
			
			public function onNotSent(e:FBBridgeEvent):void
			{
				Alert.show("Notification has been sent");
			}
			
			public function sendFriendsEmail(e:MouseEvent):void
			{
				if(dgFriends.selectedItems.length > 0)
				{
					var arrUsers:Array = new Array();
					
					for(var i:int = 0; i < dgFriends.selectedItems.length; i++)
					{
						arrUsers.push(dgFriends.selectedItems[i].uid);
					}
					
					_fbBridge.addEventListener(FBBridgeEvent.EMAIL_SENT_FAILED_AUTH, onEmailSentFailedAuth);
					_fbBridge.addEventListener(FBBridgeEvent.EMAIL_SENT, onEmailSent);
					_fbBridge.sendEmail(arrUsers, "FBFlashBridge app", "hi user <fb:name uid='" + _fbBridge.user.uid + "' /> has sent you a message");
				}
				else
					Alert.show("You need to select one or more friends");
			}
			
			public function sendAppEmail(e:MouseEvent):void
			{
				if(dgAppUsers.selectedItems.length > 0)
				{
					var arrUsers:Array = new Array();
					
					for(var i:int = 0; i < dgAppUsers.selectedItems.length; i++)
					{
						arrUsers.push(dgAppUsers.selectedItems[i].uid);
					}
					
					_fbBridge.addEventListener(FBBridgeEvent.EMAIL_SENT_FAILED_AUTH, onEmailSentFailedAuth);
					_fbBridge.addEventListener(FBBridgeEvent.EMAIL_SENT, onEmailSent);
					_fbBridge.sendEmail(arrUsers, "FBFlashBridge app", "hi user <fb:name uid='" + _fbBridge.user.uid + "' /> has sent you a message");
				}
				else
					Alert.show("You need to select one or more friends");
			}
			
			public function onEmailSent(e:FBBridgeEvent):void
			{
				Alert.show("Email has been sent");
			}
			
			public function onEmailSentFailedAuth(e:FBBridgeEvent):void
			{
				Alert.show("Email has NOT been sent, user hasn't given Email Permissions.");
			}
			
			public function getStream(e:MouseEvent):void
			{
				trace("Get Stream");
				
				_fbBridge.addEventListener(FBBridgeEvent.STREAM_GET, onStreamGet, false, 0, true);
				_fbBridge.getStream(_fbBridge.user.uid);
			}
			
			public var streamPostId:Number = 0;
			
			public function getStreamComments(e:MouseEvent):void
			{
				trace("Get Stream Comments " + streamPostId);
				
				_fbBridge.addEventListener(FBBridgeEvent.STREAM_COMMENTS_GET, onStreamCommentsGet, false, 0, true);
				_fbBridge.getStreamComments(streamPostId);
			}
			
			public function onStreamGet(e:FBBridgeEvent):void
			{
				trace("onStreamGet");
				
				streamPostId = Number((e.data as Object).posts[0].post_id);
				
				btnGetStreamComments.enabled = true;
				
				Alert.show(String((e.data as Object).posts[0].message));
			}
			
			public function onStreamCommentsGet(e:FBBridgeEvent):void
			{
				trace("onStreamCommentsGet");
				
				// Alert.show(String((e.data as Object).posts[0].message));
			}
			
		]]>
	</mx:Script>
	
	<mx:Text x="10" y="10" text="Facebook Connect Flash Bridge" fontSize="12" fontFamily="Arial" color="#0F3E48" fontWeight="bold" fontStyle="italic" width="248" height="32"/>

	<mx:Image x="10" y="50" click="connectToFB()" id="btnConnect" enabled="false"  source="../libs/Connect_light_medium_short.gif" autoLoad="true"/>
	
	<mx:Button x="107" y="50" label="Disconnect" enabled="false" id="btnDisconnect" click="disconnectFromFB()" />
	<mx:Button x="181" y="80" label="Ask Permissions" id="btnPerm" click="setPerm()" enabled="false"/>
	
	<mx:Button x="528.5" y="116" label="Invite Friends" id="btnInvite" enabled="false" click="inviteFriends()"/>
	
	<mx:Button x="386.5" y="116" label="Get Friends of user" id="btnGetFriends" enabled="false" click="getFriends()"/>
	<mx:DataGrid x="386.5" y="145" width="443" height="180" enabled="false" id="dgFriends" allowMultipleSelection="true">
		<mx:columns>
			<mx:DataGridColumn headerText="UID" dataField="uid"/>
			<mx:DataGridColumn headerText="Name" dataField="name"/>
			<mx:DataGridColumn headerText="Sex" dataField="sex"/>
			<mx:DataGridColumn headerText="Proxied Email" dataField="proxied_email"/>
		</mx:columns>
	</mx:DataGrid>
	
	<mx:Image x="386.5" y="50" id="imgProfile" width="50" height="50"/>
	<mx:Label x="442.5" y="50" width="153" id="lblName"/>
	<mx:Label x="442.5" y="82" id="lblStatus" width="321"/>
	
	<mx:Button x="386.5" y="353" label="Get Application Users" id="btnAppUsers" click="getAppUsers()" enabled="false"/>
	<mx:DataGrid x="386.5" y="383" width="443" id="dgAppUsers" allowMultipleSelection="true">
		<mx:columns>
			<mx:DataGridColumn headerText="UID" dataField="uid"/>
			<mx:DataGridColumn headerText="Name" dataField="name"/>
			<mx:DataGridColumn headerText="Sex" dataField="sex"/>
			<mx:DataGridColumn headerText="Proxied Email" dataField="proxied_email"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:ComboBox x="10" y="80" id="dPermissions" enabled="false">
		<mx:dataProvider>
          <mx:Array>
             <mx:String></mx:String>
             <mx:String>EMAIL</mx:String>
             <mx:String>OFFLINE_ACCESS</mx:String>
             <mx:String>STATUS_UPDATE</mx:String>
             <mx:String>STREAM_PUBLISH</mx:String>
             <mx:String>STREAM_READ</mx:String>
             <mx:String>PHOTO_UPLOAD</mx:String>
             <mx:String>VIDEO_UPLOAD</mx:String>
             <mx:String>SMS</mx:String>
             <mx:String>SHARE_ITEM</mx:String>
             <mx:String>SMS</mx:String>
             <mx:String>RSVP_EVENT</mx:String>
             <mx:String>CREATE_EVENT</mx:String>
             <mx:String>CREATE_LISTING</mx:String>
           </mx:Array>
       </mx:dataProvider>
	</mx:ComboBox>
	
	<mx:TabNavigator x="10" y="132" width="353" height="391" creationPolicy="all">
		<mx:Canvas label="Stream" width="100%" height="100%" creationPolicy="all">
			<mx:Button x="10" y="36" label="Publish Story" enabled="false" id="btnStory" />
			<mx:TextInput x="10" y="102" id="txtShare" enabled="false"/>
			<mx:Button x="178" y="102" label="Share Something" id="btnShare" enabled="false" />
			<mx:Text x="10" y="76" text="Share Link"/>
			<mx:Text x="10" y="142" text="Get stream stories"/>
			<mx:Text x="10" y="10" text="Publish a story to your stream"/>
			<mx:Button x="10" y="168" label="Get last item in Stream" id="btnGetStream" enabled="false"/>
			<mx:Button x="10" y="198" label="Get comments of last item in Stream" id="btnGetStreamComments" enabled="false"/>
			<mx:TextInput x="10" y="264" id="txtStatus"  enabled="false" />
			<mx:Button x="178" y="264" label="Set Status" id="btnStatus"  enabled="false" />
			<mx:Text x="10" y="238" text="Your status"/>
			<mx:Button x="10" y="294" label="Get Current Status" enabled="false" id="btnGetStatus" />
		</mx:Canvas>
		
		<mx:Canvas label="Communication" width="100%" height="100%" creationPolicy="all">
			<mx:Button x="10" y="36" label="Send Notification to selected friends" id="btnNotF"  enabled="false"/>
			<mx:Button x="10" y="67" label="Send Notification to selected app users" id="btnNotA" enabled="false"/>
			<mx:Button x="10" y="133" label="Send Email to selected friends" id="btnEmailF" enabled="false"/>
			<mx:Button x="10" y="164" label="Send Email to selected app users" id="btnEmailA" enabled="false"/>
			<mx:Text x="10" y="107" text="Send emails"/>
			<mx:Text x="10" y="10" text="Send notifications"/>
		</mx:Canvas>		
	</mx:TabNavigator>
	<mx:Button x="386" y="20" label="Get Curent User Info" id="btnGetCurrentUserInfo" enabled="false"/>
	
</mx:Application>
